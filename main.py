import logging
from telethon import TelegramClient, events, Button
from dotenv import load_dotenv
import os
from db.crud import crud_topic, crud_message
from db.base import SessionLocal
from methods.message_handler import handle_new_message
from methods.new_topic_message import new_topic_message
from decorators.error_wrapper import error_wrapper
from db.base import init_db

# Load environment variables from .env file
load_dotenv()

# Get data from .env
api_id = os.getenv("API_ID")
api_hash = os.getenv("API_HASH")
bot_token = os.getenv("BOT_TOKEN")

# Configure logging
logging.basicConfig(
    level=logging.INFO, format="%(asctime)s - %(name)s - %(levelname)s - %(message)s"
)
logger = logging.getLogger(__name__)

# Create a client instance
client = TelegramClient("bot_session", api_id, api_hash)

@client.on(events.NewMessage(pattern='/start'))
async def start_command_handler(event):
    async with SessionLocal() as db:
        async with db.begin():
            # –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Ç–æ–ø–∏–∫–æ–≤ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            topics = await crud_topic.get_all_topics(db)

            # –ó–∞–≥—Ä—É–∑–∫–∞ –≤—Å–µ—Ö –∞—Ç—Ä–∏–±—É—Ç–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –ø–æ–Ω–∞–¥–æ–±–∏—Ç—å—Å—è
            topics = [topic.name for topic in topics]

    # –°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–æ–ø–∏–∫–æ–≤
    buttons = [
        [Button.inline(topic)] for topic in topics
    ]

    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π –∫–Ω–æ–ø–æ–∫
    await event.respond(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å —Ç–æ–ø–∏–∫:",
        buttons=buttons
    )

    logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –∫–Ω–æ–ø–∫–∏ —Å —Ç–æ–ø–∏–∫–∞–º–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {event.sender_id}")

@client.on(events.CallbackQuery)
async def callback_query_handler(event):
    data = event.data.decode('utf-8')

    if data == 'back_to_topics':
        await event.delete()
        await start_command_handler(event)
        return

    async with SessionLocal() as db:
        async with db.begin():
            topic = await crud_topic.get_topic(db, data)

            if not topic:
                await event.edit("–¢–æ–ø–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                await asyncio.sleep(3)
                await event.delete()
                await start_command_handler(event)
                return

            messages = await crud_message.get_messages_by_topic(db, topic)
            if not messages:
                await event.edit("–°–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —ç—Ç–æ–≥–æ —Ç–æ–ø–∏–∫–∞ –ø–æ–∫–∞ –Ω–µ—Ç.")
                await asyncio.sleep(3)
                await event.delete()
                await start_command_handler(event)
                return

            messages_text = "\n".join([msg.message_link for msg in messages])

    # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ–±—ã –ø–æ–∫–∞–∑–∞—Ç—å —Å—Å—ã–ª–∫–∏ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Ç–æ–ø–∏–∫–µ
    await event.edit(
        f"üìú **–°–æ–æ–±—â–µ–Ω–∏—è –≤ —Ç–æ–ø–∏–∫–µ** '{data}':\n\n{messages_text}",
        buttons=[Button.inline("üîô –ù–∞–∑–∞–¥", data='back_to_topics')]
    )

@client.on(events.NewMessage)
@error_wrapper(logger)
async def new_message_listener(event):
    """
    –û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π. –í—ã–∑—ã–≤–∞–µ—Ç —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
    –∏ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤—ã—Ö —Ç–æ–ø–∏–∫–æ–≤, –µ—Å–ª–∏ —ç—Ç–æ —Ç—Ä–µ–±—É–µ—Ç—Å—è.
    
    :param event: –°–æ–±—ã—Ç–∏–µ –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.
    """
    if event.message.message.startswith('/start'):
        return  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –∫–æ–º–∞–Ω–¥—ã /start

    await handle_new_message(event, logger)
    await new_topic_message(event, logger)


@client.on(events.NewMessage)
@error_wrapper(logger)
async def new_message_listener(event):
    """
    –û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π. –í—ã–∑—ã–≤–∞–µ—Ç —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
    –∏ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤—ã—Ö —Ç–æ–ø–∏–∫–æ–≤, –µ—Å–ª–∏ —ç—Ç–æ —Ç—Ä–µ–±—É–µ—Ç—Å—è.
    
    :param event: –°–æ–±—ã—Ç–∏–µ –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.
    """
    if event.message.message.startswith('/start'):
        return  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –∫–æ–º–∞–Ω–¥—ã /start

    await handle_new_message(event, logger)
    await new_topic_message(event, logger)



# Start the bot
async def main():
    await init_db()
    await client.start(bot_token=bot_token)
    logger.info("Bot started...")
    await client.run_until_disconnected()


if __name__ == '__main__':
    import asyncio
    asyncio.run(main())
